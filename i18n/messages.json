{
	"pathData" : "Data",
	
	"nameCreateByteBuffer"     : "Create byte buffer",
	"mnemonicCreateByteBuffer" : "CreateByteBuffer",
	"childCreateByteBuffer"    : "Number of bytes",
	"leafCreateByteBuffer"     : "Create byte buffer",
	
	"pathExtraction" : "Data.Manipulation.Extraction",
	
	"mnemonicGetInteger" : "GetInteger",
	"nameGetInteger1"    : "Get integer (",
	"nameGetInteger2"    : ") from byte buffer",
	"childrenGetInteger" : [ "Byte buffer", "Position", "Signing", "Endianness" ],
	
	"mnemonicGetFloat" : "GetFloat",
	"nameGetFloat1"    : "Get float (",
	"nameGetFloat2"    : ") from byte buffer",
	"childrenGetFloat" : [ "Byte buffer", "Position", "Endianness" ],
	
	"pathUpdate" : "Data.Manipulation.Update",
	
	"mnemonicSetInteger" : "SetInteger",
	"nameSetInteger1"    : "Set integer (",
	"nameSetInteger2"    : ") to byte buffer",
	"childrenSetInteger" : [ "Byte buffer", "Position", "Value", "Signing", "Endianness" ],
	
	"mnemonicSetFloat" : "SetFloat",
	"nameSetFloat1"    : "Set float (",
	"nameSetFloat2"    : ") to byte buffer",
	"childrenSetFloat" : [ "Byte buffer", "Position", "Value", "Endianness" ],
	
	"pathToBytes" : "Data.Conversion.To byte buffer",
	
	"nameStringToBytes"     : "String to byte buffer",
	"mnemonicStringToBytes" : "StringToByteBuffer",
	"childStringToBytes"    : "String to be converted to byte buffer",
	"leafStringToBytes"     : "String to byte buffer",
	
	"nameBase64ToBytes"     : "Base64 to byte buffer",
	"mnemonicBase64ToBytes" : "Base64ToByteBuffer",
	"childBase64ToBytes"    : "Base64 to be converted to byte buffer",
	"leafBase64ToBytes"     : "Base64 to byte buffer",
	
	"nameHexToBytes"     : "Hexadecimal to byte buffer",
	"mnemonicHexToBytes" : "HexToByteBuffer",
	"childHexToBytes"    : "Hexadecimal to be converted to byte buffer",
	"leafHexToBytes"     : "Hexadecimal to byte buffer",
	
	"pathFromBytes" : "Data.Conversion.From byte buffer",
	
	"nameBytesToString"     : "Byte buffer to string",
	"mnemonicBytesToString" : "ByteBufferToString",
	"childBytesToString"    : "Byte buffer to be converted to string",
	"leafBytesToString"     : "Byte buffer to string",
	
	"nameBytesToBase64"     : "Byte buffer to base64",
	"mnemonicBytesToBase64" : "ByteBufferToBase64",
	"childBytesToBase64"    : "Byte buffer to be converted to base64",
	"leafBytesToBase64"     : "Byte buffer to base64",
	
	"nameBytesToHex"     : "Byte buffer to hexadecimal",
	"mnemonicBytesToHex" : "ByteBufferToHex",
	"childBytesToHex"    : "Byte buffer to be converted to hexadecimal",
	"leafBytesToHex"     : "Byte buffer to hexadecimal",
	
	"nameBytesToArray"     : "Byte buffer to array",
	"mnemonicBytesToArray" : "ByteBufferToArray",
	"childrenBytesToArray" : [ "Byte buffer to be converted to array", "Signing" ],
	"leafBytesToArray"     : "Byte buffer to array",
	
	"nameArrayToBytes"     : "Array to byte buffer",
	"mnemonicArrayToBytes" : "ArrayToByteBuffer",
	"childrenArrayToBytes" : [ "Array to be converted to byte buffer", "Signing" ],
	"leafArrayToBytes"     : "Array to byte buffer",
	
	"pathOptions" : "Data.Options",
	
	"pathSign" : "Data.Options.Signing",
	
	"nameUnsigned" : "Unsigned",
	"nameSigned"   : "Signed",
	
	"pathEndianness" : "Data.Options.Endianness",
	
	"nameLittle-endian" : "Little-endian",
	"nameBig-endian"    : "Big-endian"
}

